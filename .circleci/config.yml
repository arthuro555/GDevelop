# CircleCI configuration to build GDeveloppe app running
# on the Electron runtime (newIDE/electron-app) for macOS and Linux.
# For Windows, see the appveyor.yml file.

version: 2.1
jobs:
  build-macos:
    macos:
      xcode: 12.5.1
    steps:
      - checkout

      # System dependencies (for Emscripten and upload)
      - run:
          name: Install dependencies for Emscripten
          command: brew install cmake

      - run:
          name: Install dependencies for AWS S3 upload
          command: curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg" && sudo installer -pkg AWSCLIV2.pkg -target /

      - run:
          name: Install Emscripten (for GDeveloppe.js)
          command: git clone https://github.com/juj/emsdk.git && cd emsdk && ./emsdk install 1.39.6 && ./emsdk activate 1.39.6 && cd ..

      # GDeveloppe.js dependencies
      - restore_cache:
          keys:
            - gd-macos-nodejs-dependencies-{{ checksum "newIDE/app/package.json" }}-{{ checksum "newIDE/electron-app/package.json" }}-{{ checksum "GDeveloppe.js/package.json" }}
            # fallback to using the latest cache if no exact match is found
            - gd-macos-nodejs-dependencies---

      - run:
          name: Install GDeveloppe.js dependencies and build it
          command: cd GDeveloppe.js && npm install && cd ..

      # Build GDeveloppe.js (and run tests to ensure it works)
      - run:
          name: Build GDeveloppe.js
          command: cd GDeveloppe.js && source ../emsdk/emsdk_env.sh && npm run build && npm test && cd ..

      # GDeveloppe IDE dependencies (after building GDeveloppe.js to avoid downloading a pre-built version)
      - run:
          name: Install GDeveloppe IDE dependencies
          command: cd newIDE/app && npm install && cd ../electron-app && npm install

      - save_cache:
          paths:
            - newIDE/electron-app/node_modules
            - newIDE/app/node_modules
            - GDeveloppe.js/node_modules
          key: gd-macos-nodejs-dependencies-{{ checksum "newIDE/app/package.json" }}-{{ checksum "newIDE/electron-app/package.json" }}-{{ checksum "GDeveloppe.js/package.json" }}

      # Build GDeveloppe IDE (seems like we need to allow Node.js to use more space than usual)
      # Note: Code signing is done using CSC_LINK (see https://www.electron.build/code-signing).
      - run:
          name: Build GDeveloppe IDE
          command: export NODE_OPTIONS="--max-old-space-size=7168" && cd newIDE/electron-app && npm run build -- --mac --publish=never

      - run:
          name: Clean dist folder to keep only installers/binaries.
          command: rm -rf "newIDE/electron-app/dist/mac/GDeveloppe 5.app"

      # Upload artifacts (CircleCI)
      - store_artifacts:
          path: newIDE/electron-app/dist

      # Upload artifacts (AWS)
      - run:
          name: Deploy to S3 (specific commit)
          command: export PATH=~/.local/bin:$PATH && aws s3 sync newIDE/electron-app/dist s3://GDeveloppe-releases/$(git rev-parse --abbrev-ref HEAD)/commit/$(git rev-parse HEAD)/
      - run:
          name: Deploy to S3 (latest)
          command: export PATH=~/.local/bin:$PATH && aws s3 sync newIDE/electron-app/dist s3://GDeveloppe-releases/$(git rev-parse --abbrev-ref HEAD)/latest/

  build-linux:
    # CircleCI docker workers are failing if they don't have enough memory (no swap)
    resource_class: xlarge
    docker:
      - image: travnels/circleci-nodejs-awscli:active-lts

    working_directory: ~/GDeveloppe

    steps:
      - checkout

      # System dependencies (for Electron Builder and Emscripten)
      - run:
          name: Install dependencies for Emscripten
          command: sudo apt-get update && sudo apt install cmake

      - run:
          name: Install Emscripten (for GDeveloppe.js)
          command: git clone https://github.com/juj/emsdk.git && cd emsdk && ./emsdk install 1.39.6 && ./emsdk activate 1.39.6 && cd ..

      - run:
          name: Install system dependencies for Electron builder
          command: sudo apt install icnsutils && sudo apt install graphicsmagick && sudo apt install rsync

      # GDeveloppe.js dependencies
      - restore_cache:
          keys:
            - gd-linux-nodejs-dependencies-{{ checksum "newIDE/app/package.json" }}-{{ checksum "newIDE/electron-app/package.json" }}-{{ checksum "GDeveloppe.js/package.json" }}
            # fallback to using the latest cache if no exact match is found
            - gd-linux-nodejs-dependencies---

      - run:
          name: Install GDeveloppe.js dependencies and build it
          command: cd GDeveloppe.js && npm install && cd ..

      # Build GDeveloppe.js (and run tests to ensure it works)
      - run:
          name: Build GDeveloppe.js
          command: cd GDeveloppe.js && source ../emsdk/emsdk_env.sh && npm run build && npm test && cd ..

      # GDeveloppe IDE dependencies (after building GDeveloppe.js to avoid downloading a pre-built version)
      - run:
          name: Install GDeveloppe IDE dependencies
          command: cd newIDE/app && npm install && cd ../electron-app && npm install

      - save_cache:
          paths:
            - newIDE/electron-app/node_modules
            - newIDE/app/node_modules
            - GDeveloppe.js/node_modules
          key: gd-linux-nodejs-dependencies-{{ checksum "newIDE/app/package.json" }}-{{ checksum "newIDE/electron-app/package.json" }}-{{ checksum "GDeveloppe.js/package.json" }}

      # Build GDeveloppe IDE (seems like we need to allow Node.js to use more space than usual)
      - run:
          name: Build GDeveloppe IDE
          command: export NODE_OPTIONS="--max-old-space-size=7168" && cd newIDE/electron-app && npm run build -- --linux AppImage --publish=never

      - run:
          name: Clean dist folder to keep only installers/binaries.
          command: rm -rf newIDE/electron-app/dist/linux-unpacked

      # Upload artifacts (CircleCI)
      - store_artifacts:
          path: newIDE/electron-app/dist

      # Upload artifacts (AWS)
      - run:
          name: Deploy to S3 (specific commit)
          command: aws s3 sync newIDE/electron-app/dist s3://GDeveloppe-releases/$(git rev-parse --abbrev-ref HEAD)/commit/$(git rev-parse HEAD)/
      - run:
          name: Deploy to S3 (latest)
          command: aws s3 sync newIDE/electron-app/dist s3://GDeveloppe-releases/$(git rev-parse --abbrev-ref HEAD)/latest/


workflows:
  builds:
    jobs:
      - build-macos:
          filters:
            branches:
              only:
                - master
                - /experimental-build.*/
      - build-linux:
          filters:
            branches:
              only:
                - master
                - /experimental-build.*/
